import sqlite3
from pathlib import Path
import traceback
#from _tablpaths import GetDataPath, strippedpath, oeisnamespath
from _tabltypes import tblgen, trait, InvTable, RevTable, AltTable
#from _tabltraits import RegisterTraits, is_tabletrait
from _tabloeis import QueryOEIS
from _tablutils import SeqToString, FNVhash


"""
    Pretty printing of triangles trait cards.

    | A-number | Triangle   | Type | Function  | Sequence                                    |
    |----------|------------|------|-----------|---------------------------------------------|
    | A000302  | Binomial   | Std  | PolyVal3  | 1, 4, 16, 64, 256, 1024, 4096, 16384        |
    | A001333  | SchroederB | Inv  | AltSum    | 1, -1, 3, -7, 17, -41, 99, -239             |
    | A006012  | SchroederL | Inv  | AltSum    | 1, -2, 6, -20, 68, -232, 792, -2704         |
    | A026302  | Motzkin    | Rev  | Central   | 1, 2, 9, 44, 230, 1242, 6853, 38376         |
    | A103194  | Laguerre   | Std  | TransNat0 | 0, 1, 6, 39, 292, 2505, 24306, 263431       |
    | A111884  | Lah        | Std  | TransAlts | 1, -1, -1, -1, 1, 19, 151, 1091             |
    | A000000  | Laguerre   | Rev  | TransNat1 | 1, 3, 15, 97, 753, 6771, 68983, 783945      |
"""

# #@


from pathlib import Path
path = Path(__file__).parent.parent
def GetDataPath(name: str, fix: str) -> Path:
    relpath = f"data/{fix}/{name}.{fix}"
    return (path / relpath).resolve()


'''
This is a very sensible value. It is the number of terms used to calculate the hash.
'''
MINTERMS = 24
'''
To guarantee MINTERMS = 16 for sequences like the center column of the triangle,
we need to use a triangle with 31 rows (0..30). But 16 is too small!
'''
MINROWS = 2 * MINTERMS
'''
Needed for anti-diagonal traits of the triangle.
'''
DIAGSIZE = MINROWS + MINROWS // 2
'''
Maximal length of the string representing the sequence.
'''
MAXSTRLEN = 100

def GetMaxStrLen() -> int:
    return MAXSTRLEN


def QueryDBbyHash(H: str, db_cur: sqlite3.Cursor) -> str:
    """
    Query the sequences table in the local database for a given hash.

    Args:
        H (str): The hash value to query.
        oeis_cur (sqlite3.Cursor): The cursor object for executing SQL queries.

    Returns:
        str: The corresponding anum value if the hash is found, otherwise "missing".
    """
    sql = "SELECT anum FROM sequences WHERE hash=? LIMIT 1"
    res = db_cur.execute(sql, (H,))
    record = res.fetchone()
    return "missing" if record is None else record[0]


def QueryDBbySeq(seq: list[int], db_cur: sqlite3.Cursor) -> str:
    """
    Query the sequences table in the database for a given sequence.

    Args:
        seq (list[int]): The sequence to query.
        oeis_cur (sqlite3.Cursor): The cursor object for executing SQL queries.

    Returns:
        str: The corresponding anum value if the sequence is found, otherwise "missing".
    """
    x = str([abs(int(s)) for s in seq[0:MINTERMS]]).translate(
        str.maketrans("", "", "[],")
    )
    sql = "SELECT anum FROM sequences WHERE seq=? LIMIT 1"
    res = db_cur.execute(sql, (x,))
    record = res.fetchone()
    return "missing" if record is None else record[0]


def QueryLocalDB(H: str, seq: list[int], db_cur: sqlite3.Cursor) -> str:
    """
    Query local database oeismini.db.

    Args:
        H (str): The hash value to query.
        seq (list[int]): The sequence to query.
        oeis_cur (sqlite3.Cursor): The cursor object for executing SQL queries.

    Returns:
        str: The corresponding anum value if the sequence is found, otherwise "missing".
    """

    if len(seq) < MINTERMS:
        for line in traceback.format_stack():
            print(line.strip())
        raise Exception(f"*** Error *** Data has only {len(seq)} terms, {MINTERMS} required.")

    sql = "SELECT anum FROM sequences WHERE hash=? LIMIT 1"
    res = db_cur.execute(sql, (H,))
    record = res.fetchone()
    return "missing" if record is None else record[0]


def GetType(name: str) -> list[str]:
    """
    There are 7 types:
        ["", "Std", "Rev", "Inv", "Rev:Inv", "Inv:Rev", "Alt"]
    """
    sp = name.split(":", 1)
    if len(sp) == 1:
        return ["", ""]
    return name.split(":", 1)


def CreateTable(name: str) -> str:
    return f"CREATE TABLE {name}(triangle, type, trait, anum, hash, seq)"


def InsertTable(name: str) -> str:
    return f"INSERT INTO {name} VALUES(?, ?, ?, ?, ?, ?)"


def FilterTraits(anum: str, anumsonly: bool=False) -> bool:
    """
    Filter traits to remove traits that are not interesting.

    Args:
        anumber (str): The traits as A-number.
        anumsonly (bool, optional): Disregard missing anums. Defaults to False.

    Returns:
        True if the trait should be discarded.
    """
    lame = ["A000012", "A000007", "A000004"]
    if anumsonly:
        lame.append("missing")

    return anum in lame


# from typing import Callable

def SaveTraits(fun: tblgen, 
    size: int, 
    traits_cur: sqlite3.Cursor, 
    oeis_cur: sqlite3.Cursor, 
    table: str, 
    TRAITS: dict[str, trait]
) -> None:
    """Saves traits data to a database table.

    This function saves traits data to a specified database table. It uses the provided
    triangle generator `g` and size `size` to generate the traits data. The traits data is then
    stored in the `traits_cur` cursor object. The `oeis_cur` cursor object is used to
    query the OEIS (Online Encyclopedia of Integer Sequences) for additional information
    about the traits data. The `table` parameter specifies the name of the database table
    to store the traits data. The `TRAITS` dictionary contains the traits to be saved.

    Args:
        fun (tblgen): The generator used to generate the traits data.
        size (int): The size of the traits data.
        traits_cur (sqlite3.Cursor): The cursor object for the traits table.
        oeis_cur (sqlite3.Cursor): The cursor object for the OEIS table.
        table (str): The name of the database table to store the traits data.
        TRAITS (dict): A dictionary containing the traits to be saved.

    Returns:
        None
    """
    T = fun.tab(size)
    if size < MINROWS:
        raise Exception(f"*** Error *** Table {fun.id} has only {size} rows, min {MINROWS} required.")

    r = fun.gen
    triname = fun.id
    funname, trityp = GetType(triname)
 
    for traitname, trait in TRAITS.items():
        if trityp == traitname:
            continue

        seq = trait(T) if is_tabletrait(trait) else trait(r, size) # type: ignore
        if seq == []:
            print(f"Info: {triname} -> {traitname} does not exist.")
            continue

        if len(seq) < MINTERMS:
            for line in traceback.format_stack():
                print(line.strip())
            raise Exception(f"*** Error *** Table {fun.id} and trait {traitname} has only {len(seq)}, min {MINTERMS} required.")

        print(f"Processing {triname}, {traitname}, {len(seq)} ")

        fnvhash = FNVhash(seq)
        # anum = queryminioeis(fnvhash, seq, oeis_cur)  # local
        # anum = QueryOeis(fnvhash, seq, oeis_cur)  # with internet
        
        ''' def QueryOEIS(
        seqlist: list[int], 
        maxnum: int = 1,
        info: bool = False, 
        minlen: int = 24 
        ) -> int: '''
        anum = QueryOEIS(seq)  # with internet
        if anum == -999999:
            continue
        elif anum == 0:
            stranum = "missing"
        else:
            stranum = 'A' + str(anum).rjust(6, "0")
            # discard results that are not interesting
            #if FilterTraits(stranum):  
            #    continue

        seqstr = SeqToString(seq, MAXSTRLEN, 99)

        tup = (funname, trityp, traitname, stranum, fnvhash, seqstr)
        sql = InsertTable(table)
        traits_cur.execute(sql, tup)


def SaveExtendedTraitsToDB(
    fun: tblgen, 
    size: int, 
    traits_cur: sqlite3.Cursor, 
    oeis_cur: sqlite3.Cursor, 
    table: str
) -> None:
    """
    Saves the extended traits of a triangle to a SQLite database.

    Args:
        fun (tblgen): The triangle whose extended traits are to be saved.
        size (int): The size of the triangle.
        traits_cur (sqlite3.Cursor): The cursor for the traits database.
        oeis_cur (sqlite3.Cursor): The cursor for the OEIS database.
        table (str): The name of the triangle.

    Raises:
        Exception: If there is an error while saving the extended traits to the database.

    Returns:
        None
    """

    Tid = fun.id
    fun.id = fun.id + ":Std"

    # TRAITS = RegisterTraits()      dict[str, trait]:

    thash = FNVhash(fun.flat(DIAGSIZE))
    SaveTraits(fun, size, traits_cur, oeis_cur, table, TRAITS)
    fun.id = Tid

    a = AltTable(fun, DIAGSIZE)
    SaveTraits(a, size, traits_cur, oeis_cur, table, TRAITS)

    r = RevTable(fun, DIAGSIZE)
    rhash = FNVhash(r.flat(DIAGSIZE))
    if thash != rhash:
        SaveTraits(r, size, traits_cur, oeis_cur, table, TRAITS)

        # ir = InvRevTable(t, DIAGSIZE)
        ir = InvTable(r, DIAGSIZE)
        if ir is not None:
            SaveTraits(ir, size, traits_cur, oeis_cur, table, TRAITS)

    i = InvTable(fun, DIAGSIZE) 
    ihash = "0"
    if i is not None:
        ihash = FNVhash(i.flat(DIAGSIZE))
        SaveTraits(i, size, traits_cur, oeis_cur, table, TRAITS)

        # ri = RevInvTable(t, DIAGSIZE)
        ri = RevTable(i, DIAGSIZE)
        # if ri is not None:
        rihash = FNVhash(ri.flat(DIAGSIZE))
        if ihash != rihash:
            SaveTraits(ri, size, traits_cur, oeis_cur, table, TRAITS)


def SaveTraitsToDB(fun: tblgen) -> None:
    """
    Saves the traits of a triangle to a SQLite database.

    Args:
        fun (tblgen): The triangle whose traits are to be saved.

    Raises:
        Exception: If there is an error while saving the traits to the database.

    Returns:
        None
    """
    name = fun.id
    with sqlite3.connect(GetDataPath(name, "db")) as db:
        traits_cur = db.cursor()
        traits_cur.execute(CreateTable(name))

        with sqlite3.connect(GetDataPath("oeismini", "db")) as oeis:
            oeis_cur = oeis.cursor()
            SaveExtendedTraitsToDB(fun, MINROWS, traits_cur, oeis_cur, name)

        db.commit()

    print(f"Info: Created database {name}.db in data/db.")


def MergeAllDBs(tablfun: list[tblgen]):
    """
    Merge all SQLite databases into a single database.

    Args:
        tablfun (list[tblgen]): List of triangles.

    Raises:
        Exception: If there is an error during the merging process.
    """
    destname = "traits"
    destpath = GetDataPath(destname, "db")
    with sqlite3.connect(destpath) as dest:
        dest_cursor = dest.cursor()
        dest_cursor.execute(CreateTable(destname))
        for src in tablfun:
            srcpath = GetDataPath(src.id, "db")
            with sqlite3.connect(srcpath) as src:
                src_cursor = src.cursor()
                sql = "SELECT name FROM sqlite_master WHERE type='table';"
                src_cursor.execute(sql)
                tables = src_cursor.fetchall()
                for table_name in tables:
                    table_name = table_name[0]
                    print(table_name)
                    sql = f"SELECT * FROM {table_name}"
                    res = src_cursor.execute(sql)
                    trs = res.fetchall()
                    sql = InsertTable(destname)
                    dest_cursor.executemany(sql, trs)
                src_cursor.close()
        dest.commit()
        dest_cursor.close()
    print("Info: Created database traits.db in data/db.")


if __name__ == "__main__":
    from Tables import TablesList
    # from Binomial import Binomial

    def test1():
        oeis_con = sqlite3.connect(GetDataPath("oeismini", "db"))
        oeis_cur = oeis_con.cursor()
        res = oeis_cur.execute("SELECT hash, seq FROM sequences ORDER BY hash")
        hash, seq = res.fetchone()
        print(f"The highest hash is {hash!r}, which is sequence {seq}")
        oeis_con.commit()
        oeis_con.close()

    def test2():
        oeis_con = sqlite3.connect(GetDataPath("oeismini", "db"))
        oeis_cur = oeis_con.cursor()
        res = oeis_cur.execute("SELECT hash, anum, seq FROM sequences ORDER BY hash")
        output = res.fetchmany(5)
        for seq in output:
            print("hash: {0} anum: {1} seq: {2}.".format(*seq))
        oeis_con.commit()
        oeis_con.close()

    def test22(hash: str):
        oeis_con = sqlite3.connect(GetDataPath("oeismini", "db"))
        oeis_cur = oeis_con.cursor()
        res = oeis_cur.execute(f"SELECT hash, anum, seq FROM sequences WHERE hash='{hash}'")
        output = res.fetchone()
        print(output)
        oeis_con.commit()
        oeis_con.close()

    def test3():
        oeis_con = sqlite3.connect(GetDataPath("oeismini", "db"))
        oeis_cur = oeis_con.cursor()
        sql = "SELECT hash, anum, seq FROM sequences ORDER BY anum"
        res = oeis_cur.execute(sql)
        output = res.fetchmany(5)
        for seq in output:
            print("anum: {1} hash: {0} seq: {2}.".format(*seq))
        oeis_con.commit()
        oeis_con.close()

    def test7():
        from Abel import Abel
        SaveTraitsToDB(Abel)

    def test77():
        from StirlingSet import StirlingSet
        SaveTraitsToDB(StirlingSet)

    def test9():
        MergeAllDBs(TablesList)
    
    # OeisToSql()
    # test33()
    test77()
